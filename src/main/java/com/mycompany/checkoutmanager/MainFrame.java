/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.checkoutmanager;
import java.io.*;
import java.util.ArrayList;
import javax.swing.*;
/**
 *
 * @author mbath
 */
public class MainFrame extends javax.swing.JFrame {

    public static Model model;
    
    public static ArrayList<Integer> listSelections;
    
    private static DefaultListModel listModel = new DefaultListModel();
    private static String filterText;
    private static int filterButtons;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        model = new Model();        
        filterText = "";
        filterButtons = 0;
        this.listSelections = new ArrayList<>();
        updateList();
    }
    public MainFrame(Model model) {
        initComponents();
        this.model = model;
        filterText = "";
        filterButtons = 0;
        this.listSelections = new ArrayList<>();
        
        // populate jlist with model immediately
        updateList();
        //listModel.addElement("testyyy");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_display = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList_items = new javax.swing.JList<>();
        jButton_out = new javax.swing.JButton();
        jButton_in = new javax.swing.JButton();
        jButton_log = new javax.swing.JButton();
        jTextField_filter = new javax.swing.JTextField();
        jLabel_filter = new javax.swing.JLabel();
        jLabel_instructions = new javax.swing.JLabel();
        jRadioButton_all = new javax.swing.JRadioButton();
        jRadioButton_out = new javax.swing.JRadioButton();
        jRadioButton_in = new javax.swing.JRadioButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu = new javax.swing.JMenu();
        jMenuItem_add = new javax.swing.JMenuItem();
        jMenuItem_remove = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList_items.setModel(listModel);
        jList_items.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList_itemsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList_items);

        jButton_out.setText("Check Out");
        jButton_out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_outActionPerformed(evt);
            }
        });

        jButton_in.setText("Check In");
        jButton_in.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_inActionPerformed(evt);
            }
        });

        jButton_log.setText("Display Check In/Out Log");

        jTextField_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_filterActionPerformed(evt);
            }
        });
        jTextField_filter.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextField_filterPropertyChange(evt);
            }
        });
        jTextField_filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField_filterKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField_filterKeyTyped(evt);
            }
        });

        jLabel_filter.setText("Filter:");

        jLabel_instructions.setText("<html>\nClick an item to select it. Hold down the Ctrl (Control) key and click a selected item to deselect it.<br/>\nTo select multiple items, hold down the Ctrl (Control) key and click all desired items.<br/>\nTo deselect items while multiple are selected, hold down the Ctrl (Control) key and click all undesired items.<br/>\nTo check selected items out, click the Check Out button.<br/>\nTo check items in, click the Check In button.<br/>\n</html>");

        buttonGroup_display.add(jRadioButton_all);
        jRadioButton_all.setSelected(true);
        jRadioButton_all.setText("Display All");
        jRadioButton_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_allActionPerformed(evt);
            }
        });

        buttonGroup_display.add(jRadioButton_out);
        jRadioButton_out.setText("Display Checked Out");
        jRadioButton_out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_outActionPerformed(evt);
            }
        });

        buttonGroup_display.add(jRadioButton_in);
        jRadioButton_in.setText("Display Available");
        jRadioButton_in.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_inActionPerformed(evt);
            }
        });

        jMenu.setText("Update Items List");
        jMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuActionPerformed(evt);
            }
        });

        jMenuItem_add.setText("Add Item");
        jMenuItem_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addActionPerformed(evt);
            }
        });
        jMenu.add(jMenuItem_add);

        jMenuItem_remove.setText("Remove Selected Items");
        jMenuItem_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_removeActionPerformed(evt);
            }
        });
        jMenu.add(jMenuItem_remove);

        jMenuBar2.add(jMenu);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_instructions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton_in, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel_filter)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField_filter)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(63, 63, 63)
                                    .addComponent(jButton_out, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jRadioButton_out)
                                        .addComponent(jRadioButton_all)
                                        .addComponent(jRadioButton_in)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton_log))))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel_instructions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_filter)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_out)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_in)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_log)
                        .addGap(44, 44, 44)
                        .addComponent(jRadioButton_all)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton_out)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton_in)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_outActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_outActionPerformed
        // TODO add your handling code here:
        for (int index : listSelections) {
            
        }
    }//GEN-LAST:event_jButton_outActionPerformed

    private void jButton_inActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_inActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton_inActionPerformed

    private void jMenuItem_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_removeActionPerformed
        // TODO add your handling code here:
        int execute = JOptionPane.showConfirmDialog(null, "This action permanently deletes all of the currently selected items in the list. Do you wish to continue?", "Confirm", JOptionPane.YES_NO_OPTION);
        System.out.println(execute);
        if (execute == 0) {
            ArrayList<String> itemnames = new ArrayList<>();
            ArrayList<String> todelete = new ArrayList<>();
            ArrayList<Item> items = model.getItems();
            for (int i = 0; i < items.size(); i++){
                itemnames.add(items.get(i).getName());
            }
            for (int index : listSelections) {
                todelete.add(itemnames.get(index));
            }
            for (String item : todelete) {
                model.removeItem(item);
            }
            updateList();
        }
    }//GEN-LAST:event_jMenuItem_removeActionPerformed

    private void jMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuActionPerformed

    private void jMenuItem_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addActionPerformed
        // TODO add your handling code here:
        String name = JOptionPane.showInputDialog("New item:");
        Item newItem = new Item(name);
        model.addItem(newItem);
        updateList();
    }//GEN-LAST:event_jMenuItem_addActionPerformed

    private void jList_itemsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList_itemsValueChanged
        // TODO add your handling code here:
        listSelections.clear();
        for (int index : jList_items.getSelectedIndices()) {
            listSelections.add(index);
        }
    }//GEN-LAST:event_jList_itemsValueChanged

    private void jTextField_filterPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextField_filterPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_filterPropertyChange

    private void jTextField_filterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_filterKeyTyped
        
    }//GEN-LAST:event_jTextField_filterKeyTyped

    private void jTextField_filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_filterActionPerformed
        
    }//GEN-LAST:event_jTextField_filterActionPerformed

    private void jTextField_filterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_filterKeyReleased
        // TODO add your handling code here:
        filterText = jTextField_filter.getText();
        updateList();
    }//GEN-LAST:event_jTextField_filterKeyReleased

    private void jRadioButton_outActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_outActionPerformed
        // TODO add your handling code here:
        filterButtons = 1;
        updateList();
    }//GEN-LAST:event_jRadioButton_outActionPerformed

    private void jRadioButton_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_allActionPerformed
        // TODO add your handling code here:
        filterButtons = 0;
        updateList();
    }//GEN-LAST:event_jRadioButton_allActionPerformed

    private void jRadioButton_inActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_inActionPerformed
        // TODO add your handling code here:
        filterButtons = 2;
        updateList();
    }//GEN-LAST:event_jRadioButton_inActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    // my methods here
    public static void save() {
            try {
            File f = new File("list.txt");
            FileOutputStream fileOut = new FileOutputStream(f);
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(model);
            out.close();
            fileOut.close();
            System.out.printf("Serialized data is saved in /tmp/list.txt");
         } catch (IOException i) {
            i.printStackTrace();
         }
     }
    
    public static void updateList() {
        listModel.clear();
        ArrayList<Item> items = model.getItems();
        
        for (Item item : items) {
            if (item.getName() == null) {
                item.setName("default");
            }
        }
        
        for (Item item : items) {
            System.out.println(item.getName());
            if (item.getName().contains(filterText)) {
                switch (filterButtons) {
                case 0:
                    listModel.addElement(item.getName());
                    break;
                case 1:
                    if (item.getCheckedOut() != -1) {
                        listModel.addElement(item.getName());                        
                    }
                    break;
                case 2:
                    if (item.getCheckedOut() == -1) {
                        listModel.addElement(item.getName());                        
                    }
                    break;
                }
                
            }
                
        }
//        for (int i = 0; i < items.size(); i++){
//            if (items.get(i).getName().contains(filterText)) {
//                listModel.addElement(items.get(i).getName());
//            }
//        }
        
        save();
    }
    
    //

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_display;
    private javax.swing.JButton jButton_in;
    private javax.swing.JButton jButton_log;
    private javax.swing.JButton jButton_out;
    private javax.swing.JLabel jLabel_filter;
    private javax.swing.JLabel jLabel_instructions;
    private javax.swing.JList<String> jList_items;
    private javax.swing.JMenu jMenu;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem_add;
    private javax.swing.JMenuItem jMenuItem_remove;
    private javax.swing.JRadioButton jRadioButton_all;
    private javax.swing.JRadioButton jRadioButton_in;
    private javax.swing.JRadioButton jRadioButton_out;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField_filter;
    // End of variables declaration//GEN-END:variables
}
